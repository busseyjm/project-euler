// Highly divisible triangular number

// Problem 12

// The sequence of triangle numbers is generated by adding the natural numbers. 
//  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
//  The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?


#include <string>
#include <iostream>
#include <boost/multiprecision/cpp_int.hpp>

namespace mp = boost::multiprecision;
int factorcount(mp::cpp_int buh);

using namespace std;
//mp::cpp_int a = mp::pow(mp::cpp_int(2),i);
//string stra = a.str();


int main() {
  mp::cpp_int triangle = 1;
  mp::cpp_int increment = 2;

  while (1) {
    int factors = factorcount(triangle);
    if (factors>500) break;
    cout << "triangle: " << triangle;
    cout << " increments: " << increment;
    cout << " factors: " << factors << endl << endl;
    triangle+=increment;
    increment++;
  }
  cout << "triangle with over 500 factors is: " << triangle;

  return 0;
}

int factorcount(mp::cpp_int factorable) {
  if (factorable==0) return 0;
  if (factorable==1) return 1;
  int factorcount = 2;
  for (int i=2; i<sqrt(factorable); i++) {
    if (factorable%i == 0) {
      factorcount+=2;
    }
  }
  //works under the presumption that sqrt truncates
  if (pow((sqrt(factorable)), 2)==factorable)
    factorcount++;
  return factorcount;
}
