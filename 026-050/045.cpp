// Triangular, pentagonal, and hexagonal
 
// Problem 45

// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
// Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
// Pentagonal 	  Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
// Hexagonal 	  	Hn=n(2n−1) 	  	  1, 6, 15, 28, 45, ...

// It can be verified that T285 = P165 = H143 = 40755.

// Find the next triangle number that is also pentagonal and hexagonal.


#include <string>
#include <iostream>
#include <boost/multiprecision/cpp_int.hpp>
#include "../timer.hpp"

namespace mp = boost::multiprecision;
using namespace std;

int main() {

  Timer t;

  vector<mp::cpp_int> tri;
  vector<mp::cpp_int> pnt;
  vector<mp::cpp_int> hex;

  //generate n-gonals
  //all hexagonals are also triangles, so just check penta==hex
  // tri.push_back(-1); 
  pnt.push_back(-1);
  hex.push_back(-1);

  for (mp::cpp_int i=1; i<500000; i++) {
    // tri.push_back(i*((i+1))/2);
    pnt.push_back((i*((i*3)-1))/2);
    hex.push_back(i*((i*2)-1));
  }

  for (mp::cpp_int i=1; i<500000; i++) {
    // if (binary_search(pnt.begin(), pnt.end(), tri[int(i)])) {
      if (binary_search(hex.begin(), hex.end(), pnt[int(i)])) {
        cout << "found: " << pnt[int(i)] << endl;
      }
    // }
  }


  t.printms();

  return 0;
}
