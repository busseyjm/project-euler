// Pentagon numbers

// Problem 44

// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
//  The first ten pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 
//  70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their 
//  sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
//  what is the value of D?


#include <string>
#include <iostream>
#include <boost/multiprecision/cpp_int.hpp>
#include "../timer.hpp"

namespace mp = boost::multiprecision;
using namespace std;

int main() {

  Timer t;

  vector<int> pnt;

  //generate pentagonals
  pnt.push_back(-1);
  for (int i=1; i<5000; i++) {
    pnt.push_back((i*((i*3)-1))/2);
  }

  bool end = 0;
  int d = 0;

  for (int k=1; k<5000; k++) {
    if (end) break;
    for (int j=1; j<k; j++) {
      if (binary_search(pnt.begin(), pnt.end(), (pnt[k]-pnt[j]))) {
        // cout << "k: " << k << " j: " << j << endl;
        if (binary_search(pnt.begin(), pnt.end(), (pnt[k]+pnt[j]))) {
          // cout << "k: " << k << " j: " << j << " d: " << pnt[k]-pnt[j] << endl;
          end = 1;
          d = pnt[k]-pnt[j];
          //break on the first result
          break;
        }
      }
    }
  }

  cout << d << endl;

  t.printms();

  return 0;
}
