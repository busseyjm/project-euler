// Distinct powers


// Problem 29

// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

//     2^2=4, 2^3=8, 2^4=16, 2^5=32
//     3^2=9, 3^3=27, 3^4=81, 3^5=243
//     4^2=16, 4^3=64, 4^4=256, 4^5=1024
//     5^2=25, 5^3=125, 5^4=625, 5^5=3125

// If they are then placed in numerical order, with any repeats removed, 
//  we get the following sequence of 15 distinct terms:

// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 
//  and 2 ≤ b ≤ 100?


#include <string>
#include <iostream>
#include <boost/multiprecision/cpp_int.hpp>
#include "../timer.hpp"

namespace mp = boost::multiprecision;
using namespace std;

int main() {

  Timer t;

  vector<mp::cpp_int> powers;
  vector<mp::cpp_int>::iterator it;

  //brute forcing this won't be too hard, can be reduced by ignoring terms
  //  that would already exist (2^4 to 100 contains 4^2 to 50 etc)
  for (int a=2; a<=100; a++) {
    for (int b=2; b<=100; b++) {
      it = find(powers.begin(), powers.end(), mp::pow(mp::cpp_int(a), b));
      //if a^b exists in our list, don't add it again
      if (it != powers.end()) {
        continue;
      } else {
        powers.push_back(mp::pow(mp::cpp_int(a), b));
      }
    }
  }

  cout << powers.size() << endl;

  t.printms();

  return 0;
}
